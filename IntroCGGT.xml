<?xml version="1.0" encoding="UTF-8"?>
<pretext>
  <docinfo>
    <brandlogo source="images/CGGT.svg"/>
    
    <latex-image-preamble>
    \usepackage{tikz}
  </latex-image-preamble>
  <macros>
    \newcommand{\into}{\hookrightarrow}
    \newcommand{\onto}{\twoheadrightarrow}
    \newcommand{\QQ}{\mathbb{Q}}
  </macros>
</docinfo>

<book xml:id="IntroCGGT">
  <title>An introduction to combinatorial and geometric group
  theory</title>
  <frontmatter>
    <titlepage>
      <author>
	<personname>Nicholas Touikan</personname>
      </author>
      <date>Last Modified <today/></date>
    </titlepage>
    
    <introduction xml:id="chap_intro"><title>Introduction</title>
    <p>
      Because the field of geometric group theory is relatively new,
      sounds cool, is cool, and is accessible, it is, in 2020, very
      active and evolving. This also means that geometric group
      theory means different things to different people.
    </p>
    
    <p>
      Lie groups, for example, are interesting as groups, play a
      critical role in geometry, and would certainly have their place
      in a course in geometric group theory. But, Dynkin diagrams
      notwithstanding, drawings are not a major tool for dealing with
      Lie groups. Furthermore, differential geometry is a prerequisite
      to studying these groups.
    </p>

    <p>
      This course will be a self-contained introduction to the art of
      working with infinite discrete groups by drawing pictures. In
      particular this course has no advanced prerequisites, besides
      mathematical maturity. This constraint will guide the choice of
      topics.
    </p>

    <p>
      We will start with a rigourous exploration of the <m>F(X)</m>,
      the free group on a set <m>X</m> of letters and touch on the
      clasical subject of combinatorial group theory, which is the
      study of groups given by generators and relations. One driving
      question will be: <i>Which calculations can we perform, or which
      algorithmic problems can we solve, in a group given by a certain
      presentation?</i>
    </p>
    
    <p>
      Our approach to this will be geometrical: group presentations
      enable us to draw Van Kampen diagrams and we will see that in
      the presence of (combinatorial) negative curvature, many
      algorithmic problems become tractable.
    </p>

    <p>Along the way we will touch on many other topics that can be
    explored by the techniques we will develop.</p>

    </introduction>

    <references>
      <p>
      Much of the material in these lectures is covered in <xref
      ref="book_lyndon-schupp"/>, but this book is difficult to
      read. Stillwell's book <xref ref="book_stillwell"/> has an
      excellent treatement of algorithmic problems and covers many
      crucial interractions between topology and group theory that
      will not be not covered in this course. Both of these books also
      give important historical accounts.
      </p>
      <p>
      Although the ideas of small cancellation theory have been around
      for many decades the paper <xref ref="art_mccammond-wise"/>
      gives a thorough and modern treatment of the topic. Most
      material on hyperbolic groups will be taken from <xref
      ref="notes_hyperbolic"/>.
      </p>

      <p> The book, which as of 2020, gives the best description of
      the field is Drutu and Kapovich's <em>Geometric Group
      Theory</em> <xref ref="book_drutu-kapovich"/>. This book also
      has many historical references. Many important topics not
      covered in this book are covered in <xref ref="GGT-park"/> which
      is also called... <em>Geomeric Group Theory.</em>
      </p>


      <p>
    	As far as accessible contemporary introductions go, the texts
    	<xref ref="book_bogopolski"/> and <xref ref="book_loh_ggt"/>
    	are at a level similar to this course, but cover different
    	topics.(And yes, so far there are three books with the same
    	title.) <url
    	href="https://www.jstor.org/stable/j.ctt1vwmg8g">Office Hours
    	with a Geometric Group Theorist</url> apparently also gives a
    	good idea of the field. And finally <xref
    	ref="book_groups_and_back"/> is another good introductory text
    	which covers substantially different topics.
      </p>
      
      <biblio xml:id="book_bogopolski">
    	Oleg Bogopolski. <em>Introduction to Group Theory.</em>
    	February 2008.
      </biblio>
      <biblio xml:id="notes_hyperbolic">
    	J. M. Alonso, T. Brady, D. Cooper, V. Ferlini, M. Lustig,
    	M. Mihalik, M. Shapiro, and H. Short. <em>Notes on word hyperbolic
    	groups. In Group theory from a geometrical viewpoint (Trieste,
    	1990),</em> pages 3–63. World Sci. Publ., River Edge, NJ, 1991.
      </biblio>

      <biblio xml:id="GGT-park">
    	Mladen Bestvina, Michah Sageev, and Karen Vogtmann,
    	editors. <em>Ge- ometric group theory.</em> Number volume 21
    	in IAS/Park City math- ematics series. American Mathematical
    	Society ; Institute for Ad- vanced Studyb, Providence, RI :
    	[Princeton, N.J.], 2014.
      </biblio>

      <biblio xml:id="book_drutu-kapovich">
    	Cornelia Druţu and Michael Kapovich. <em>Geometric Group
    	Theory.</em> American Mathematical Soc., March
    	2018.
      </biblio>

      <biblio xml:id="book_lyndon-schupp">
    	Roger C. Lyndon and Paul E. Schupp. <em>Combinatorial group
    	theory.</em> Classics in Mathematics. Springer-Verlag, Berlin,
    	2001.
      </biblio>

      <biblio xml:id="book_stillwell">
    	John Stillwell. <em>Classical topology and combinatorial group
    	theory,</em> volume 72 of Graduate Texts in
    	Mathematics. Springer-Verlag, New York, second edition, 1993.
      </biblio>

      <biblio xml:id="art_mccammond-wise">
    	Jonathan P. McCammond and Daniel T. Wise. <em>Fans and Ladders
    	in Small Cancellation Theory.</em>. Proceedings of the London
    	Mathematical Society, 84(3):599–644, May 2002. Publisher:
    	Cambridge University Press.
      </biblio>

      <biblio xml:id="book_ggt_officehours">
    	Matt Clay and Dan Margalit, editors. <em>Office hours with a
    	geometric group theorist.</em> Princeton University Press,
    	Princeton, NJ, 2017.
      </biblio>

      <biblio xml:id="book_loh_ggt">Clara Löh. <em>Geometric group
      theory.</em> Universitext. Springer, Cham, 2017.</biblio>

      <biblio xml:id="book_groups_and_back">
    	Vaughn Climenhaga and Anatole Katok. <em>From Groups to
    	Geometry and Back.</em> American Mathematical Soc., April 2017
      </biblio>
    </references>
    
  </frontmatter>

  <chapter><title>Free groups and presentations</title>
    <section xml:id="reductions"><title>Lecture 1: Words and reductions</title>
    <p>
      Let <m>X</m> be a set. We will call <m>X</m> an
      <term>alphabet</term> and we will call its elements
      <term>symbols</term>. For each symbol <m>x \in X</m> take a
      formal inverse <m>x^{-1}</m> and we denote:
      <me>
	 X^{\pm 1} = X \cup \{x^{-1} : x \in X\}.
      </me>
      We further adopt the convention that <m>\left(x^{-1}\right)^{-1}
      = x</m>.
      
      A <term>word</term> in <m>X^{\pm 1}</m> is a string of symbols
      <me>
	w(X) = x_1x_2\cdots x_n
      </me>
      where each symbol <m>x_i \in X^{\pm 1}</m>. In the situation
      where alphabet is clear we will simply write <m>w</m> instead of
      <m>w(X)</m>.   
      
      So, for example, if  <m>X = \{a,b,c\}</m> then <m>X^{\pm 1} = \{a,
      a^{-1}, b, b^{-1},c , c^{-1}\}</m> and the string <me>
      abbac^{-1}b^{-1}ba^{-1}</me> is a word in <m>X^{\pm 1}</m>.
    </p>

    <p>
      Given two words <m>w_1,w_2</m> in some alphabet <m>X</m>, we
      denote their <term>concatenation</term> by <m>w_1\ast
      w_2</m>. For example if
      <me>
	w_1 = ab \text{  and  } w_2 = ba,
      </me>
      then <m>w_1\ast w_2 = abba</m>. 
    </p>

    <p>We will state the following proposition without proof, we would
    encourage the reader to prove this for themselves, but since the
    the reader will soon be asked to prove similar statements, we will
    not insist. That being said, <em>composition of functions and
    concatenation are two prototypical associative binary
    operations. </em></p>
    <proposition xml:id="cat-assoc">
      <statement><p>
	Concatenation of words is associative, i.e. <me>
	\left(w_1\ast w_2\right)\ast w_3 = w_1\ast
	\left(w_2\ast w_3\right). </me></p>
      </statement>
    </proposition>
    
    <p>
      In particular the concatenation of three words <me> w_1\ast
      w_2 \ast w_3
    </me>
    is well defined. Given a word <m>w</m> we will say that <m>u</m>
    is a <term>subword</term> of <m>w</m> if there are words
    <m>w',w''</m>, which may be empty, such that
    <me>
      w = w'\ast u \ast w''.
    </me>
    </p>

    <p> We say that a word <m>w(X)</m> is <term>reduced</term> if it
    has no subwords of the form <m> xx^{-1}</m> where <m>x \in X^{\pm
    1}.</m> We are now in a situation where we can describe the set
    underlying <m>F(X)</m> the <term>free group on alphabet
    <m>X</m></term>.
    </p>

    <p>Let's first consider an analogy with the set <m>\QQ</m> of
    fractions. We can consider fractions to be formal ratios of
    integers, but two different formal ratios, such as <m>\frac 2 4
    \text{ and } \frac 4 8</m>, can be equal. <m>\QQ</m> is therefore
    best thought of the set of ratios of formal ratios of integers
    modulo some eqivalence relation. Furthermore every equivalence
    class of ratios has a reduced element. In <m>\QQ</m> a ratio is
    reduced if the numerator and denominator are relatively prime.</p>

    <p>As a set <m>F(X)</m> can be thought of as the collection of
    words in the alphabet <m>X</m> modulo an equivalence relation
    which we will now define.
    </p>

    <definition xml:id="cancellation">
      <statement>
	<p> An <term>elementary cancellation</term> in a word <m>w</m>
	is the operation of deleting a subword of the form
	<m>xx^{-1}</m> where <m>x \in X^{\pm 1}</m>, i.e.<me>
	w = w'\ast xx^{-1} \ast w'' \stackrel{c}{\to} w'\ast w''</me>.
	</p>
	<p> If <m>u</m> is obtained from <m>w</m> by an elementary
	cancellation, i.e. <m>w \stackrel{c}{\to}u</m>, then we say
	that <m>u</m> is obtained from <m>w</m> by an <term>elementary
	insertion</term>. </p>	
      </statement>
    </definition>
    <p>
    So, for example, we have:
    <me>
      bca^{-1}ac \stackrel{c}{\to} bcc.
    </me>
    </p>
    
    <p>
      We now define an equivalence relation <m>\stackrel{c}{\sim}</m>
      on the set of words in <m>X</m> as follows:
      <ol>
	<li>
	   For each word we declare <m>w \stackrel c \sim
	   w</m>. (Reflexivity)
	</li>
	<li>
	  We declare <m>w \stackrel c \sim u</m> if <m>w</m> can be
	  brought to <m>u</m> by a sequence of elementary
	  cancellations and elementary insertions.
	</li>
      </ol>
    </p>

    <p>Now, on the one hand, given any word, because it has finite
    <term>length</term> (which here means number of symbols) after a
    finite sequence of elementary cancellations we will arrive at a
    reduced word. On the other hand, a given word can admit many
    distinct elementary cancellations, and in particular there are
    many different possible sequences of elementary cancellations
    which bring a word <m>w</m> to its reduced form. We can now state
    the main result of this lecture.</p>

    <theorem xml:id="thm_unique_reduced">
      <statement>
	Every word <m>w</m> in an alphabet <m>X</m> has a unique
	reduced form <m>\overline w</m>,
	i.e. if <m>w' \stackrel c \sim w \stackrel c \sim w''</m> and
	both <m>w,w''</m> are reduced, then <m>w'=w''</m>.
      </statement>
    </theorem>

    A restatement of this theorem is that elementary reductions form a
    <url href="https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)">
      confluent rewriting system.
    </url>
    
    The following exercises will guide the reader through the proof.
    
    <exercises><title>Lecture 1 exercises</title>
    <p> The purpose of these exercises, besides proving a crucial fact
    about free groups, is to get the reader to write arguments using
    words and using the technique of induction on word length.
    </p>
      <exercise>
	<statement>
	  <p>Prove the diamond lemma:</p>
	  <lemma xml:id="lem_diamond"><title>The diamond lemma</title>
	    <statement>
	      Suppose we have two elementary cancellations of a word
	      <m>w</m> <me>w_1 \stackrel c \leftarrow w \stackrel c
	      \to w_2</me>, then there exists some <m>w'</m> such that
	      there are cancellations <me> w_1 \stackrel c \to w'
	      \stackrel c \leftarrow w_2.
	    </me> See <xref ref="fig_diamond"/>.
	    </statement>
	  </lemma>
	    <figure xml:id="fig_diamond">
	      <caption>The diamond lemma</caption>
	      <image width="20%" xml:id="diamond_lemma">
		<latex-image>
		  \begin{tikzpicture}
		  \node (w) at (0,0) {$w$};
		  \node (w1) at (-1,-1) {$w_1$};
		  \node (w2) at (1,-1) {$w_2$};
		  \node (wp) at (0,-2) {$w'$};
		  \draw[->] (w) -- node[above]{$c$} (w1);
		  \draw[->] (w) -- node[above]{$c$} (w2);
		  \draw[->] (w1) -- node[above]{$c$} (wp);
		  \draw[->] (w2) -- node[above]{$c$} (wp);
		  \end{tikzpicture}
		</latex-image>
	      </image>
	    </figure>
	  <p>
	    Hint: There are two cases to consider: whether or not the
	    cancelled subwords in <m>w</m> overlap. Be thoughtful with
	    your notation and use of subscripts.
	  </p>
	</statement>
      </exercise>

      <exercise>
	<statement>
	  <p>Use the diamond lemma to prove <xref
	  ref="thm_unique_reduced"/>
	  </p>
	  <p>Hint:
	  <!-- <ul> -->
	  <!--   <li>Start by writing out some words to see how the -->
	  <!--   diamons lemma works.</li> -->
	  <!--   <li>Suppose towards a contradiction that some word <m>w</m> -->
	  <!--   could be reduced to two distinct reduced forms.</li> -->
	  <!--   <li>Use induction on the length of words, i.e. consider a -->
	  <!--   minimal length counterexample.</li> -->
	  <!--   <li> -->
	      Start with this diagram where <m>w</m> is a minimal
	      length counterexample and <m>\overline w</m> and
	      <m>\overline w'</m> are distinct reduced words:
	      <image width="50%" xml:id="confluence">
		<latex-image>
		  \begin{tikzpicture}
		  \node (w) at (0,0) {$w$};
		  \node (w1) at (-1,-1) {$w_1$};
		  \node (w2) at (1,-1) {$w_2$};
		  \node (ow) at (-3,-3) {$\overline w'$};
		  \node (owp) at (3,-3) {$\overline w$};
		  \draw[->] (w) -- node[above]{$c$} (w1);
		  \draw[->] (w) -- node[above]{$c$} (w2);
		  \draw[->] (w1) -- node[above]{$c$} (-2,-2);
		  \draw[->] (w2) -- node[above]{$c$} (2,-2);
		  \path (-2,-2) --node[sloped]{$\cdots$} (ow);
		  \path (2,-2) --node[sloped]{$\cdots$} (owp);
		  \end{tikzpicture}
		</latex-image>
	      </image>
	  <!--   </li> -->
	  <!-- </ul> -->
	  </p>
	</statement>
      </exercise>
    </exercises>
    
    </section>

    <section xml:id="universal"><title>Lecture 2: The free group and
    its universal property</title>
    <p>As the reader should already know, a <term>group</term>
    <m>(G,\cdot)</m> is a pair consisting of a set <m>G</m> and a
    binary operation <m>\star:G\times G \to G</m>, usually called
    <term>multiplication</term>, which satisfies the following axioms:
    <ul>
      <li>The multiplication operation is <term>associative</term>,
      i.e. for all <m>g,h,k \in G</m> we have <me>(g\star h)\star k =
      g\star(h \star k).</me></li>
      <li>There exists an element <m>1_G\in G</m> called the
      <term>identity elment</term> such that for every <m>g\in ,
      1_G \star g = g</m>.</li>
      <li>For every <m>g \in G</m> there exists an inverse <m>g^{-1}
      \in G</m> such that <m>g\star g^{-1}=1_G.</m>
      </li>
    </ul>
    We will always denote a group by simply <m>G</m>, we will almost
    always omit the subscript for the identity element, and we will
    usually denote multiplication simply by concatenation, i.e. "we'll"
    write stuf like <me>gg^{-1}=1.</me> </p> <p> <m>F(X)</m>, the
    <term>free group on an alphabet <m>X</m></term> consists of the
    set of reduced words in <m>X</m> and multiplication is defined by
    concatenation and reduction, i.e.  <me> u\star v = \overline{u*v},
    </me> where <m>*</m> denotes concatentation of strings.  The
    identity <m>1_{F(X)}</m> is the empty word (i.e. the word with
    zero symbols in it.) Associativity amounts to showing that
    <me>
      (u\star v)\star w = \overline{\overline{u * v} * w} = \overline{
      u* \overline{v * w}} = u\star (v\star w),
    </me>
    which immidiately follows from <xref
    ref="thm_unique_reduced"/>. We leave the third group axiom as
    <xref ref="ex_free_gp_inv"/>.
  </p>

  <p>
    The free group plays a crucial role because of the following
    <term>universal property.</term>
  </p>

  <theorem xml:id="thm_free_gp_universal"><title>The universal
  property of free groups.</title>
    <statement>Let <m>G</m> be any group and let <m>F(X)</m> be the
    free group on the alphabet <m>X</m>. Then for any function
    <me>
      \varphi*:X \to G
    </me>
    there exists a unique group homomorphism
    <me>
      \varphi^*: F(X) \to G
      </me>  such that <m>\varphi \mid_X = \varphi</m>,
      i.e. <m>\varphi^*</m> is an extension of <m>\varphi</m>.
    </statement>
      <figure xml:id="fig_universal_prop">
	      <caption>The universal property of free groups.</caption>
	      <image width="20%" xml:id="universal_prop">
		<latex-image>
		  \begin{tikzpicture}[xscale=2]
		  \node (FX) at (0,0) {$F(X)$};
		  \node (X) at (0,-1) {$X$};
		  \node (G) at (1,0) {$G$};
		  \path (X) --node[sloped]{$\subset$} (FX);
		  \draw[->] (X) --node[below]{$\forall \varphi$} (G);
		  \draw[dashed,->] (FX)
		  --node[above]{$\exists!\varphi^*$}
		  (G);
		  \end{tikzpicture}
		</latex-image>
	      </image>
      </figure>
  </theorem>

  <p>
    Our approach to Theorem <xref ref="thm_free_gp_universal"/> hinges
    on a consequence of associativity: <term>generalized
    associativity</term>. Since it is difficult to get excited about
    associativity, some discussion is in order.
  </p>

  <p> Division <m>\div</m> is not associative, which means that
  expressions of the form <m>12\div 12 \div 12</m> are not well
  defined:<me> \frac{1}{12} = (12\div 12) \div 12 \neq 12\div(12\div
  12) = 12.</me> Different bracketings give different results. In the
  previous lecture associativity was used to say that a product of
  three elements <m>w_1\star w_2 \star w_3</m> was well-defined, which
  in turn enables us to define subwords. So what about arbitrary
  products such as
  <me>
    g_1g_2\cdots g_n = \prod_{i=1}^n g_i
  </me>?
  The issue here is that our group operation is a <em>binary
  operation</em>. Bracketing simply gives the order in which we
  perform the multiplication operations, multiplying two elements at a
  time. Associativity only says that products of three factors are
  well defined. We will say that a product is <term>nice</term> if it
  looks like
  <me>
    a_1*(a_2*(a_3*a_4))
  </me>
  and other wise a product like <me> ((a_1*a_2)*(a_3*a_4))*a_5</me> is
  called <term>messy</term>. This terminology is neither standard nor
  particuarly good. In fact we "didn't" even give precise
  definitions. In <xerv ref="ex_nice"/> you are asked to give a
  precise recursive definition of a nice product and then you will be
  asked to prove the following:
  </p>
  <theorem xml:id="thm_gen_assoc"><title>Generalized
  associativity</title>
  <statement>
    Any messy product can be turned into a nice product by a sequence
    of appliations of the associativity axiom. Furthermore the order
    the factors is preserved.
  </statement>
  </theorem>

  From which the following immediately follows:

  <corollary xml:id="cor_products">
    <statement>
      In any group (or any algebraic structure with an assoicative
      binary operation) long products <me>
      g_1\cdots g_n = \prod_{i=1}^n g_i; g_i \in G
    </me>
    are well-defined.
    </statement>
  </corollary>

  <p>
  Here is why we care. Supose you are given some <m>\varphi:X \to
  G</m> which maps each letter of the alphabet to arbitrary elements
  of <m>G</m>, then we can extend this to a function <m>\varphi^*:
  F(X)\to G</m>. Indeed let <m>w = a_1^{\epsilon_1}\cdots
  a_n^{\epsilon_n}</m>, where each <m>a_i \in X</m> and each
  <m>\epsilon_i \in \{1,-1\}</m>, be some arbitrary element of
  <m>F(X),</m> then we set
  <men xml:id="eq_free_gp">
  \varphi^*(w) = \prod_{i=1}^n\varphi(a_i)^{\epsilon_i}, </men> which
  is a product of elements of <m>G</m>. Generalized associativity
  ensures that this mapping is <em>well-defined.</em> Showing that this is a
  homomorphism is is left as an exercise.
  </p>

  <p>If, so far, our treatment has seemed rather formal, this is
  because our goal up to now was to a group using nothing but the
  axioms of group theory and some set of letters we had lying around
  and then to show it is satisfied a universal property in the
  category of groups, i.e. <xref ref="thm_free_gp_universal"/>. Such
  universal constructions in algebra look this way.</p>

  <p>It is also worth noting that everybody just seems to assume
  generalized associativity. We will do the same in subsequent
  lectures, in fact we "won't" even mention it again, but at least we
  are assured that long products are well defined.</p>
  
  <p>
    We end this lecture with the following result which algebraically
    characterizes free groups.
  </p>
  <corollary xml:id="cor_free_gp">
    <statement>
      Let <m>G</m> be some group with a subset <m>Y\subset G</m> such
      for any group <m>H</m> and any map <m>f:Y \to H</m>, there is
      an extension of <m>f</m> to a homomorpshism <m>f^*:G \to
      H</m>. Then <m>G</m> is isomorphic to the free group
      <m>F(Y)</m>.
    </statement>
  </corollary>
  Recall that although we would call the set <m>Y</m> an alphabet and
  its elements letters, the alphabet can be any set, even elements of
  another group. For clarity, however, we make a copies of sets in the
  proof below.

  <proof>
    <p>
      For clarity let us take <m>X</m> to be a copy of <m>Y</m>,
      i.e. we have a bijection <m>\psi:X\to Y</m> and we denote its
      inverse <m>\phi:Y \to X</m>. We consider <m>Y\subset G</m> and
      <m>X \subset F(X)</m>.
    </p>
    <p>      
      By <xref ref="thm_free_gp_universal"/> there is a homomorphism
      <m>\psi^*:F(X) \to G</m> which extends <m>\psi</m>. By
      hypothesis there is also a homomorphism <m>\phi^*:G \to F(X)</m>
      which extends <m>\phi</m>.
    </p>
    <p>
      Let <m>w = \prod_{i=1}^n x_i</m>, where <m>x_i \in X^{\pm 1}</m>
      be an arbitrary element of <m>F(X)</m>. Then by the definition
      of a homomorphism and generalized associativity we have:<me>
      \phi^*\circ\psi^*\left( \prod_{i=1}^n x_i\right)= \prod_{i=1}^n
      \phi^*\circ\psi^*(x_i) = \prod_{i=1}^n x_i, </me> since on
      <m>X</m>, <m>\phi^*\circ\psi^*= \phi\circ\psi = Id.</m> 
    </p>

    <p>The homomorphisms <m>\psi^*,\phi^*</m> are therefore inverses
    of each other; thus are isomorphisms.</p>
  </proof>

  <p>
    Any subset <m>Y</m> of a group <m>G</m> with this universal
    mapping property is called a <term>basis of <m>G</m></term>, and,
    since "we're" <em>free</em> to send elements of <m>Y</m> wherever
    we say that <m>G</m> is a free group with basis <m>Y</m>. As is
    the case in linear algebra, bases are never unique, but that is
    for another lecture (not the next one)!
  </p>
  
  <exercises><title>Lecture 2 exercises</title>
  <exercise xml:id="ex_free_gp_inv">
    <statement>
      <p>Prove that every element in <m>F(X)</m> has an inverse.</p>
    <p>
      Hint: Give the procedure to produce the inverse of a
      word. sdrawkcab etirw.
    </p>
    </statement>
    
  </exercise>
  <exercise xml:id="ex_nice">
    <statement>
    <p>It is an important skill to be able to be able to capture an
    idea with a good definition.</p>
    <p>
      There are two parts to this exercise:
      <ol>
	<li>Give a precise recursive definition of a nice
	product.</li>
	<li>Use this definition to prove <xref
	ref="thm_gen_assoc"/>.</li>
      </ol>      
    </p>
    </statement>
  </exercise>
  <exercise>
    <statement>
      Prove <xref ref="thm_free_gp_universal"/>.
    <p>
      Hint: This really amounts to verifying that the mapping <xref
      ref="eq_free_gp"/> is well-defined (which is ensured by
      generalized associativity) and that it satisfies the
      requirements of a homomorphism. All the work was really done in
      showing generalized associativity.
    </p>
    </statement>
  </exercise>
  </exercises>

    </section>
    <!-- <section xml:id="generation_and_presentation"><title>Lecture 3: -->
    <!-- Generation and presentation</title> -->
    <!-- <p> -->
      
    <!-- </p> -->
    <!-- </section> -->
    
    <!-- Generating groups and group presentations -->.
    <!-- Cayley graphs, paths, labels, group elements. -->
    <!-- Homomorphisms and Tietze transformations. -->
    <!-- Algorihtmic problems, cancellation diagrams and solutions in free -->
    <!-- groups. -->
    <!-- Nielsen theory. -->
    <!-- Stallings foldings. -->
  </chapter>
  <!-- Chapter: Diagrams -->
  <!-- Lollipops. -->
  
  <!-- WIP
    <backmatter>
    <title>References</title>
    <section><title>Things to read</title>
    Books here</section>
    </backmatter> -->
  </book>
</pretext>
