<?xml version="1.0" encoding="UTF-8"?>
<pretext>
  <docinfo>
    <brandlogo source="images/CGGT.png"/>
    
    <latex-image-preamble>
    \usepackage{tikz}
    \tikzstyle{vertex}=[circle, draw, fill=black, inner sep=0pt, minimum width=4pt]
    
    </latex-image-preamble>
  <macros>
    \newcommand{\into}{\hookrightarrow}
    \newcommand{\onto}{\twoheadrightarrow}
    \newcommand{\QQ}{\mathbb{Q}}
    \newcommand{\ZZ}{\mathbb{Z}}
    \newcommand{\RR}{\mathbb{R}}
    \newcommand{\GL}[2]{\mathrm{GL(#1,#2)}}
    \newcommand{\gen}[1]{{\left\langle #1 \right\rangle}}
    \newcommand{\ncl}[1]{\gen{\gen{#1}}}
    \newcommand{\pres}[2]{{\left\langle #1 \middle | #2
    \right\rangle}}
    \newcommand{\cay}[2]{{\mathbf{Cay}_{#1}\left(#2\right)}}
    \newcommand{\lab}{\mathbf{label}}
  </macros>
</docinfo>

<book xml:id="IntroCGGT">
  <title>An introduction to combinatorial and geometric group
  theory</title>
  <frontmatter>
    <titlepage>
      <author>
	<personname>Nicholas Touikan</personname>
      </author>
      <date>Last Modified <today/></date>
    </titlepage>
    <introduction xml:id="chap_intro"><title>Introduction</title>
    <p>
      Because the field of geometric group theory is relatively new,
      sounds cool, is cool, and is accessible, it is, in 2020, very
      active and evolving. This also means that geometric group
      theory means different things to different people.
    </p>
    
    <p>
      Lie groups, for example, are interesting as groups, play a
      critical role in geometry, and would certainly have their place
      in a course in geometric group theory. But, Dynkin diagrams
      notwithstanding, drawings are not a major tool for dealing with
      Lie groups. Furthermore, differential geometry is a prerequisite
      to studying these groups.
    </p>

    <p>
      This course will be a self-contained introduction to the art of
      working with infinite discrete groups by drawing pictures. In
      particular this course has no advanced prerequisites, besides
      mathematical maturity. This constraint will guide the choice of
      topics.
    </p>

    <p>
      We will start with a rigorous exploration of the <m>F(X)</m>,
      the free group on a set <m>X</m> of letters and touch on the
      classical subject of combinatorial group theory, which is the
      study of groups given by generators and relations. One driving
      question will be: <i>Which calculations can we perform, or which
      algorithmic problems can we solve, in a group given by a certain
      presentation?</i>
    </p>
    
    <p>
      Our approach to this will be geometrical: group presentations
      enable us to draw Van Kampen diagrams and we will see that in
      the presence of (combinatorial) negative curvature, many
      algorithmic problems become tractable.
    </p>

    <p>Along the way we will touch on many other topics that can be
    explored by the techniques we will develop.</p>

    </introduction>



  </frontmatter>

  <chapter><title>Free groups and presentations</title>
    <section xml:id="reductions"><title>Lecture 1: Words and reductions</title>
    <p>
      Let <m>X</m> be a set. We will call <m>X</m> an
      <term>alphabet</term> and we will call its elements
      <term>symbols</term>. For each symbol <m>x \in X</m> take a
      formal inverse <m>x^{-1}</m> and we denote:
      <me>
	 X^{\pm 1} = X \cup \{x^{-1} : x \in X\}.
      </me>
      We further adopt the convention that <m>\left(x^{-1}\right)^{-1}
      = x</m>.
      
      A <term>word</term> in <m>X^{\pm 1}</m> is a string of symbols
      <me>
	w(X) = x_1x_2\cdots x_n
      </me>
      where each symbol <m>x_i \in X^{\pm 1}</m>. In the situation
      where alphabet is clear we will simply write <m>w</m> instead of
      <m>w(X)</m>.   
      
      So, for example, if  <m>X = \{a,b,c\}</m> then <m>X^{\pm 1} = \{a,
      a^{-1}, b, b^{-1},c , c^{-1}\}</m> and the string <me>
      abbac^{-1}b^{-1}ba^{-1}</me> is a word in <m>X^{\pm 1}</m>.
    </p>

    <p>
      Given two words <m>w_1,w_2</m> in some alphabet <m>X</m>, we
      denote their <term>concatenation</term> by <m>w_1\ast
      w_2</m>. For example if
      <me>
	w_1 = ab \text{  and  } w_2 = ba,
      </me>
      then <m>w_1\ast w_2 = abba</m>. 
    </p>

    <p>We will state the following proposition without proof, we would
    encourage the reader to prove this for themselves, but since the
    the reader will soon be asked to prove similar statements, we will
    not insist. That being said, <em>composition of functions and
    concatenation are two prototypical associative binary
    operations. </em></p>
    <proposition xml:id="cat-assoc">
      <statement><p>
	Concatenation of words is associative, i.e. <me>
	\left(w_1\ast w_2\right)\ast w_3 = w_1\ast
	\left(w_2\ast w_3\right). </me></p>
      </statement>
    </proposition>
    
    <p>
      In particular the concatenation of three words <me> w_1\ast
      w_2 \ast w_3
    </me>
    is well defined. Given a word <m>w</m> we will say that <m>u</m>
    is a <term>subword</term> of <m>w</m> if there are words
    <m>w',w''</m>, which may be empty, such that
    <me>
      w = w'\ast u \ast w''.
    </me>
    </p>

    <p> We say that a word <m>w(X)</m> is <term>reduced</term> if it
    has no subwords of the form <m> xx^{-1}</m> where <m>x \in X^{\pm
    1}.</m> We are now in a situation where we can describe the set
    underlying <m>F(X)</m> the <term>free group on alphabet
    <m>X</m></term>.
    </p>

    <p>Let&apos;s first consider an analogy with the set <m>\QQ</m> of
    fractions. We can consider fractions to be formal ratios of
    integers, but two different formal ratios, such as <m>\frac 2 4
    \text{ and } \frac 4 8</m>, can be equal. <m>\QQ</m> is therefore
    best thought of the set of ratios of formal ratios of integers
    modulo some equivalence relation. Furthermore every equivalence
    class of ratios has a reduced element. In <m>\QQ</m> a ratio is
    reduced if the numerator and denominator are relatively prime.</p>

    <p>As a set <m>F(X)</m> can be thought of as the collection of
    words in the alphabet <m>X</m> modulo an equivalence relation
    which we will now define.
    </p>

    <definition xml:id="cancellation">
      <statement>
	<p> An <term>elementary cancellation</term> in a word <m>w</m>
	is the operation of deleting a subword of the form
	<m>xx^{-1}</m> where <m>x \in X^{\pm 1}</m>, i.e.<me>
	w = w'\ast xx^{-1} \ast w'' \stackrel{c}{\to} w'\ast w''</me>.
	</p>
	<p> If <m>u</m> is obtained from <m>w</m> by an elementary
	cancellation, i.e. <m>w \stackrel{c}{\to}u</m>, then we say
	that <m>u</m> is obtained from <m>w</m> by an <term>elementary
	insertion</term>. </p>	
      </statement>
    </definition>
    <p>
    So, for example, we have:
    <me>
      bca^{-1}ac \stackrel{c}{\to} bcc.
    </me>
    </p>
    
    <p>
      We now define an equivalence relation <m>\stackrel{c}{\sim}</m>
      on the set of words in <m>X</m> as follows:
      <ol>
	<li>
	   For each word we declare <m>w \stackrel c \sim
	   w</m>. (Reflexivity)
	</li>
	<li>
	  We declare <m>w \stackrel c \sim u</m> if <m>w</m> can be
	  brought to <m>u</m> by a sequence of elementary
	  cancellations and elementary insertions.
	</li>
      </ol>
    </p>

    <p>Now, on the one hand, given any word, because it has finite
    <term>length</term> (which here means number of symbols) after a
    finite sequence of elementary cancellations we will arrive at a
    reduced word. On the other hand, a given word can admit many
    distinct elementary cancellations, and in particular there are
    many different possible sequences of elementary cancellations
    which bring a word <m>w</m> to its reduced form. We can now state
    the main result of this lecture.</p>

    <theorem xml:id="thm_unique_reduced">
      <statement>
	Every word <m>w</m> in an alphabet <m>X</m> has a unique
	reduced form <m>\overline w</m>,
	i.e. if <m>w' \stackrel c \sim w \stackrel c \sim w''</m> and
	both <m>w,w''</m> are reduced, then <m>w'=w''</m>.
      </statement>
    </theorem>

    A restatement of this theorem is that elementary reductions form a
    <url href="https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)">
      confluent rewriting system.
    </url>
    
    The following exercises will guide the reader through the proof.
    
    <exercises><title>Lecture 1 exercises</title>
    <p> The purpose of these exercises, besides proving a crucial fact
    about free groups, is to get the reader to write arguments using
    words and using the technique of induction on word length.
    </p>
      <exercise>
	<statement>
	  <p>Prove the diamond lemma:</p>
	  <lemma xml:id="lem_diamond"><title>The diamond lemma</title>
	    <statement>
	      Suppose we have two elementary cancellations of a word
	      <m>w</m> <me>w_1 \stackrel c \leftarrow w \stackrel c
	      \to w_2</me>, then there exists some <m>w'</m> such that
	      there are cancellations <me> w_1 \stackrel c \to w'
	      \stackrel c \leftarrow w_2.
	    </me> See <xref ref="fig_diamond"/>.
	    </statement>
	  </lemma>
	    <figure xml:id="fig_diamond">
	      <caption>The diamond lemma</caption>
	      <image width="20%" xml:id="diamond_lemma">
		<latex-image>
		  \begin{tikzpicture}
		  \node (w) at (0,0) {$w$};
		  \node (w1) at (-1,-1) {$w_1$};
		  \node (w2) at (1,-1) {$w_2$};
		  \node (wp) at (0,-2) {$w'$};
		  \draw[->] (w) -- node[above]{$c$} (w1);
		  \draw[->] (w) -- node[above]{$c$} (w2);
		  \draw[->] (w1) -- node[above]{$c$} (wp);
		  \draw[->] (w2) -- node[above]{$c$} (wp);
		  \end{tikzpicture}
		</latex-image>
	      </image>
	    </figure>
	  <p>
	    Hint: There are two cases to consider: whether or not the
	    cancelled subwords in <m>w</m> overlap. Be thoughtful with
	    your notation and use of subscripts.
	  </p>
	</statement>
      </exercise>

      <exercise>
	<statement>
	  <p>Use the diamond lemma to prove <xref
	  ref="thm_unique_reduced"/>
	  </p>
	  <p>Hint:
	  <!-- <ul> -->
	  <!--   <li>Start by writing out some words to see how the -->
	  <!--   diamons lemma works.</li> -->
	  <!--   <li>Suppose towards a contradiction that some word <m>w</m> -->
	  <!--   could be reduced to two distinct reduced forms.</li> -->
	  <!--   <li>Use induction on the length of words, i.e. consider a -->
	  <!--   minimal length counterexample.</li> -->
	  <!--   <li> -->
	      Start with this diagram where <m>w</m> is a minimal
	      length counterexample and <m>\overline w</m> and
	      <m>\overline w'</m> are distinct reduced words:
	      <image width="50%" xml:id="confluence">
		<latex-image>
		  \begin{tikzpicture}
		  \node (w) at (0,0) {$w$};
		  \node (w1) at (-1,-1) {$w_1$};
		  \node (w2) at (1,-1) {$w_2$};
		  \node (ow) at (-3,-3) {$\overline w'$};
		  \node (owp) at (3,-3) {$\overline w$};
		  \draw[->] (w) -- node[above]{$c$} (w1);
		  \draw[->] (w) -- node[above]{$c$} (w2);
		  \draw[->] (w1) -- node[above]{$c$} (-2,-2);
		  \draw[->] (w2) -- node[above]{$c$} (2,-2);
		  \path (-2,-2) --node[sloped]{$\cdots$} (ow);
		  \path (2,-2) --node[sloped]{$\cdots$} (owp);
		  \end{tikzpicture}
		</latex-image>
	      </image>
	  <!--   </li> -->
	  <!-- </ul> -->
	  </p>
	</statement>
      </exercise>
    </exercises>
    
    </section>

    <section xml:id="universal"><title>Lecture 2: The free group and
    its universal property</title>
    <p>As the reader should already know, a <term>group</term>
    <m>(G,\cdot)</m> is a pair consisting of a set <m>G</m> and a
    binary operation <m>\star:G\times G \to G</m>, usually called
    <term>multiplication</term>, which satisfies the following axioms:
    <ul>
      <li>The multiplication operation is <term>associative</term>,
      i.e. for all <m>g,h,k \in G</m> we have <me>(g\star h)\star k =
      g\star(h \star k).</me></li>
      <li>There exists an element <m>1_G\in G</m> called the
      <term>identity element</term> such that for every <m>g\in ,
      1_G \star g = g</m>.</li>
      <li>For every <m>g \in G</m> there exists an inverse <m>g^{-1}
      \in G</m> such that <m>g\star g^{-1}=1_G.</m>
      </li>
    </ul>
    We will always denote a group by simply <m>G</m>, we will almost
    always omit the subscript for the identity element, and we will
    usually denote multiplication simply by concatenation, i.e. we&apos;ll
    write stuff like <me>gg^{-1}=1.</me> </p> <p> <m>F(X)</m>, the
    <term>free group on an alphabet <m>X</m></term> consists of the
    set of reduced words in <m>X</m> and multiplication is defined by
    concatenation and reduction, i.e.  <me> u\star v = \overline{u*v},
    </me> where <m>*</m> denotes concatenation of strings.  The
    identity <m>1_{F(X)}</m> is the empty word (i.e. the word with
    zero symbols in it.) Associativity amounts to showing that
    <me>
      (u\star v)\star w = \overline{\overline{u * v} * w} = \overline{
      u* \overline{v * w}} = u\star (v\star w),
    </me>
    which immediately follows from <xref
    ref="thm_unique_reduced"/>. We leave the third group axiom as
    <xref ref="ex_free_gp_inv"/>.
  </p>

  <p>
    The free group plays a crucial role because of the following
    <term>universal property.</term>
  </p>

  <theorem xml:id="thm_free_gp_universal"><title>The universal
  property of free groups.</title>
    <statement>Let <m>G</m> be any group and let <m>F(X)</m> be the
    free group on the alphabet <m>X</m>. Then for any function
    <me>
      \varphi*:X \to G
    </me>
    there exists a unique group homomorphism
    <me>
      \varphi^*: F(X) \to G
      </me>  such that <m>\varphi \mid_X = \varphi</m>,
      i.e. <m>\varphi^*</m> is an extension of <m>\varphi</m>.
    </statement>
      <figure xml:id="fig_universal_prop">
	      <caption>The universal property of free groups.</caption>
	      <image width="20%" xml:id="universal_prop">
		<latex-image>
		  \begin{tikzpicture}[xscale=2]
		  \node (FX) at (0,0) {$F(X)$};
		  \node (X) at (0,-1) {$X$};
		  \node (G) at (1,0) {$G$};
		  \path (X) --node[sloped]{$\subset$} (FX);
		  \draw[->] (X) --node[below]{$\forall \varphi$} (G);
		  \draw[dashed,->] (FX)
		  --node[above]{$\exists!\varphi^*$}
		  (G);
		  \end{tikzpicture}
		</latex-image>
	      </image>
      </figure>
  </theorem>

  <p>
    Our approach to Theorem <xref ref="thm_free_gp_universal"/> hinges
    on a consequence of associativity: <term>generalized
    associativity</term>. Since it is difficult to get excited about
    associativity, some discussion is in order.
  </p>

  <p> Division <m>\div</m> is not associative, which means that
  expressions of the form <m>12\div 12 \div 12</m> are not well
  defined:<me> \frac{1}{12} = (12\div 12) \div 12 \neq 12\div(12\div
  12) = 12.</me> Different bracketings give different results. In the
  previous lecture associativity was used to say that a product of
  three elements <m>w_1\star w_2 \star w_3</m> was well-defined, which
  in turn enables us to define subwords. So what about arbitrary
  products such as
  <me>
    g_1g_2\cdots g_n = \prod_{i=1}^n g_i
  </me>?
  The issue here is that our group operation is a <em>binary
  operation</em>. Bracketing simply gives the order in which we
  perform the multiplication operations, multiplying two elements at a
  time. Associativity only says that products of three factors are
  well defined. We will say that a product is <term>nice</term> if it
  looks like
  <me>
    a_1*(a_2*(a_3*a_4))
  </me>
  and other wise a product like <me> ((a_1*a_2)*(a_3*a_4))*a_5</me> is
  called <term>messy</term>. This terminology is neither standard nor
  particularly good. In fact we didn&apos;t even give precise
  definitions. In <xerv ref="ex_nice"/> you are asked to give a
  precise recursive definition of a nice product and then you will be
  asked to prove the following:
  </p>
  <theorem xml:id="thm_gen_assoc"><title>Generalized
  associativity</title>
  <statement>
    Any messy product can be turned into a nice product by a sequence
    of applications of the associativity axiom. Furthermore the order
    the factors is preserved.
  </statement>
  </theorem>

  From which the following immediately follows:

  <corollary xml:id="cor_products">
    <statement>
      In any group (or any algebraic structure with an associative
      binary operation) long products <me>
      g_1\cdots g_n = \prod_{i=1}^n g_i; g_i \in G
    </me>
    are well-defined.
    </statement>
  </corollary>

  <p>
  Here is why we care. Suppose you are given some <m>\varphi:X \to
  G</m> which maps each letter of the alphabet to arbitrary elements
  of <m>G</m>, then we can extend this to a function <m>\varphi^*:
  F(X)\to G</m>. Indeed let <m>w = a_1^{\epsilon_1}\cdots
  a_n^{\epsilon_n}</m>, where each <m>a_i \in X</m> and each
  <m>\epsilon_i \in \{1,-1\}</m>, be some arbitrary element of
  <m>F(X),</m> then we set
  <men xml:id="eq_free_gp">
  \varphi^*(w) = \prod_{i=1}^n\varphi(a_i)^{\epsilon_i}, </men> which
  is a product of elements of <m>G</m>. Generalized associativity
  ensures that this mapping is <em>well-defined.</em> Showing that this is a
  homomorphism is is left as an exercise.
  </p>

  <p>If, so far, our treatment has seemed rather formal, this is
  because our goal up to now was to a group using nothing but the
  axioms of group theory and some set of letters we had lying around
  and then to show it is satisfied a universal property in the
  category of groups, i.e. <xref ref="thm_free_gp_universal"/>. Such
  universal constructions in algebra look this way.</p>

  <p>It is also worth noting that everybody just seems to assume
  generalized associativity. We will do the same in subsequent
  lectures, in fact we won&apos;t even mention it again, but at least we
  are assured that long products are well defined.</p>
  
  <p>
    We end this lecture with the following result which algebraically
    characterizes free groups.
  </p>
  <corollary xml:id="cor_free_gp">
    <statement>
      Let <m>G</m> be some group with a subset <m>Y\subset G</m> such
      for any group <m>H</m> and any map <m>f:Y \to H</m>, there is
      an extension of <m>f</m> to a homomorphisms <m>f^*:G \to
      H</m>. Then <m>G</m> is isomorphic to the free group
      <m>F(Y)</m>.
    </statement>
  </corollary>
  Recall that although we would call the set <m>Y</m> an alphabet and
  its elements letters, the alphabet can be any set, even elements of
  another group. For clarity, however, we make a copies of sets in the
  proof below.

  <proof>
    <p>
      For clarity let us take <m>X</m> to be a copy of <m>Y</m>,
      i.e. we have a bijection <m>\psi:X\to Y</m> and we denote its
      inverse <m>\phi:Y \to X</m>. We consider <m>Y\subset G</m> and
      <m>X \subset F(X)</m>.
    </p>
    <p>      
      By <xref ref="thm_free_gp_universal"/> there is a homomorphism
      <m>\psi^*:F(X) \to G</m> which extends <m>\psi</m>. By
      hypothesis there is also a homomorphism <m>\phi^*:G \to F(X)</m>
      which extends <m>\phi</m>.
    </p>
    <p>
      Let <m>w = \prod_{i=1}^n x_i</m>, where <m>x_i \in X^{\pm 1}</m>
      be an arbitrary element of <m>F(X)</m>. Then by the definition
      of a homomorphism and generalized associativity we have:<me>
      \phi^*\circ\psi^*\left( \prod_{i=1}^n x_i\right)= \prod_{i=1}^n
      \phi^*\circ\psi^*(x_i) = \prod_{i=1}^n x_i, </me> since on
      <m>X</m>, <m>\phi^*\circ\psi^*= \phi\circ\psi = Id.</m> 
    </p>

    <p>The homomorphisms <m>\psi^*,\phi^*</m> are therefore inverses
    of each other; thus are isomorphisms.</p>
  </proof>

  <p>
    Any subset <m>Y</m> of a group <m>G</m> with this universal
    mapping property is called a <term>basis of <m>G</m></term>, and,
    since we&apos;re <em>free</em> to send elements of <m>Y</m> wherever
    we say that <m>G</m> is a free group with basis <m>Y</m>. As is
    the case in linear algebra, bases are never unique, but that is
    for another lecture (not the next one)!
  </p>
  
  <exercises><title>Lecture 2 exercises</title>
  <exercise xml:id="ex_free_gp_inv">
    <statement>
      <p>Prove that every element in <m>F(X)</m> has an inverse.</p>
    <p>
      Hint: Give the procedure to produce the inverse of a
      word. sdrawkcab etirw.
    </p>
    </statement>
    
  </exercise>
  <exercise xml:id="ex_nice">
    <statement>
    <p>It is an important skill to be able to be able to capture an
    idea with a good definition.</p>
    <p>
      There are two parts to this exercise:
      <ol>
	<li>Give a precise recursive definition of a nice
	product.</li>
	<li>Use this definition to prove <xref
	ref="thm_gen_assoc"/>.</li>
      </ol>      
    </p>
    </statement>
  </exercise>
  <exercise>
    <statement>
      Prove <xref ref="thm_free_gp_universal"/>.
    <p>
      Hint: This really amounts to verifying that the mapping <xref
      ref="eq_free_gp"/> is well-defined (which is ensured by
      generalized associativity) and that it satisfies the
      requirements of a homomorphism. All the work was really done in
      showing generalized associativity.
    </p>
    </statement>
  </exercise>
  </exercises>

    </section>
    <section xml:id="generation_and_presentation"><title>Lecture 3:
    Generating and presenting groups</title>
    <p>
      Long products are group elements are important to us. The
      following lemma gives us a definition of <term>a subgroup
      generated by a collection of elements</term>
    </p>
      <lemma xml:id="lem_generate">
	<statmement>
	  Let <m>H \leq G</m> be a subgroup and let
	  <m>S=\{h_1,\ldots\} \subset G</m> be a set of
	  elements. The following are equivalent:
	  <ul>
	    <li><m>H</m> is the smallest subgroup of <m>G</m>
	    containing <m>S</m>, i.e.
	    <me>
	      H = \bigcap_{S\subset K \leq G} K,
	    </me> i.e. the intersection of all subgroups of <m>G</m>
	    containing <m>S</m>.
	    </li>
	    <li>
	      <m>H</m> consists of all products of elements <m>S^{\pm
	      1}</m>, i.e. <me> H = \left\{h_{i_1}^{\epsilon_1}\cdots
	      h_{i_n}^{\epsilon_n} \in G \mid h_{i_j}\in S, \epsilon_j
	      \in \{\pm 1\}, n \in \ZZ_{\geq 0} \right\}
	    </me>
	    </li>
	  </ul>
	</statmement>
      </lemma>
    <p>
      We will denote the subgroup generated by
      <m>S=\{h_1,\ldots\}</m> as <m>\gen S</m> or
      <m>\gen{h_1,\ldots}</m>.
    </p>
    <proof>
      <p>
      Let us denote by <m>H</m> the smallest subgroup containing
      <m>S</m> and by <m>\gen S</m> set of products of elements in
      <m>S^{\pm 1}</m>. <m>\gen S</m> is closed under multiplication
      and taking inverses so it&apos;s a subgroup of <m>G</m>. By
      definition, it&apos;s therefore immediate that <m>H \subset \gen S</m>.
      </p>

      
      <p>
      To see that <m>H \supset \gen S</m>, we proceed by induction on
      the length of a product. By definition any product of length 1,
      being an element of <m>S^{\pm 1}</m>, is in <m>H</m>. If every
      product of length at most <m>n</m> is in <m>H</m>, then, because
      a product of length <m>n+1</m> is a product of a product of
      length <m>n</m> and a product of length <m>1</m> and because
      <m>H</m>, being a subgroup, is closed under multiplication,
      every product of length <m>n+1</m> is also in
      <m>H</m>. Therefore, by induction, <m>H \supset \gen S</m> and
      equality follows.
      </p> 
    </proof>
    <p>
    Any set <m>S \subset G</m> such that <m>G = \gen S</m> is
    called a <term>generating set of G</term>.  If <m>G</m> has a
    finite generating subset <m>\{g_1,\cdots,g_k\}\subset G</m> then
    we way <m>G</m> is <term>finitely generated.</term>

    The <term>rank</term> of a group <m>G</m> is the minimal
    cardinality achieved by its generating sets, though this
    terminology is less standard and typically has other meanings in
    different group theoretical contexts.
    </p>

    <p> Since <m>G = \gen G</m>, every finite group is finitely
    generated and it is a standard fact that every symmetric group
    <m>S_n</m> has rank 2. It&apos;s already more impressive when an
    infinite group has finite rank. Here are three examples:
    <ul>
      <li>
	If <m>X = \{a,b,c\}</m> then the free group <m>F(X)</m> has
	rank 3. In general if <m>|X|=n</m> then we will say that
	<m>F(X)</m> is a <term>free group of rank <m>n</m>.</term>
      </li>
      <li>
	<m>\GL 2 \ZZ</m>, the group of <m>2\times 2</m> invertible
	matrices with <m>\ZZ</m> coefficients also has rank 2, indeed
	it is generated by elementary matrices:
	<me>
	  \GL 2 \ZZ = \gen{
	  \begin{bmatrix}
	  0&amp;1\\
	  1&amp;0
	  \end{bmatrix},
	  \begin{bmatrix}
	  1&amp;1\\
	  0&amp;1
	  \end{bmatrix}
	  }.
	</me>
      </li>
      <li>
	<m>\pi_1(M)</m>, where <m>M</m> is a compact finite
	dimensional manifold is also finitely generated.
      </li>
    </ul>
    </p>

    <p>If <m>\gen S =G</m>, then by <xref
    ref="thm_free_gp_universal"/>, there is an epimorphism, or a
    surjective homomorphism, <m>\varphi:F(S) \onto G</m>. So it is immediate
    that if <m>G</m> has rank <m>n</m> then it is the homomorphic
    image of a free group of rank <m>n</m>.</p>

    <p>
      In any case if <m>G = \gen S</m> and <m>X</m> is any alphabet
      such that <m>|X| = |S|</m>, by the First Isomorphism Theorem for
      groups we have
      <me>
	F(X)/\ker(\varphi) \approx G.
      </me>     
    </p>

    <p>
      Let us fix some more terminology before continuing. If <m>g,h
      \in G</m>, then the <term>conjugate of <m>g</m> by
      <m></m>h</term> is
      <me>
	g^h = h^{-1} g h.
      </me> Some people write <m>g^h = h g h^{-1}</m>, but they are
      <em>wrong</em> because we should have <m>(g^h)^k =
      g^{hk}</m>. Although it looks weird, it makes more sense to write
      <me>
	{~}^h g = h gh^{-1} = g^{h^{-1}}.
	</me> The correct notation is
	consistent with the concepts of left and right actions.
    </p>

    <p>
      Recall that a normal subgroup <m>N \triangleleft G</m> is a
      subgroup that is closed under conjugation by arbitrary elements
      in <m>G</m>, and the class of normal subgroups coincides with
      the kernels of homomorphisms from <m>G</m>. Consider now the
      concept of <term>normal generation</term>:
    </p>
    <proposition xml:id="prop_normal_gen">
      <statement>
	Let <m>R\subset G</m> be some subset. Then
	the smallest normal subgroup of <m>G</m> containing <m>R</m>
	coincides with
	<me>
	  \ncl R = \left\{\prod_{i=1}^n c_i^{-1}r_i^{\epsilon_i} c_i
	  \middle |
	  r_i \in R,\epsilon_i \in \{\pm 1\}, c_i \in G, n \in
	  \ZZ_{\geq 0}\right\},
	</me> the set of products of conjugates of elements in
	<m>R^{\pm 1}</m>.
      </statement>
    </proposition>
    <p>
    We leave the proof to <xref ref="ex_normal_gen"/>.
    </p>

    <p>
      So if <m>R \subset F(X)</m> is a subset then we call we call the
      the pair <m>\pres X R</m> a <term>presentation</term> for the
      group
      <me>
	F(X)/\ncl R.
      </me>
      The set <m>X</m> is called the <term>generators</term> and the
      set <m>R</m> is called the <term>relations.</term>
    </p>
    <p>
      For the rest of the course we will make the following
      abuse of notation. If there is an epimorphisms <m>f:F(X) \onto
      G</m> and <m>\ker(f) = \ncl R</m> then we will just go ahead and
      write
      <me>
	G = \pres X R.
      </me>
      There will come a time we will need to be subtle about the fact
      that <m>\pres X R</m> is just a set of letters and a set of
      strings separated by a pipe inside angled brackets and that in
      fact <m> G \approx F(X)/\ncl R</m>. When that time comes we will
      say so. If there exists some <m>R \subset F(X)</m> such that
      <m>G = \pres X R</m> and <m>|R|\lt\infty</m>, then we will say
      that <m>G</m> is <term>finitely presentable</term> and if the set
      <m>R</m> is explicitly given, then <m>G</m> is said to be
      <term>finitely presented</term>. We will not usually make a
      distinction between these two terms and <em>we will usually just
      say that <m>G</m> is finitely presented.</em>
    </p>


    <p>
      By expressing <m>G = \pres X R</m>, we are identifying <m>G</m>
      with the set of words in <m>X</m> modulo the equivalence
      relation generated by the following rewriting rules
      <ul>
	<li>
	  Elementary cancellations, and their inverses.
	</li>
	<li>
	  Insertion of subwords from <m>R</m>, i.e. write <m>w</m> as
	  a word and "splice in" <m>r</m> somewhere:
	  <me>
	    w = w_1*w_2 \to w_1*r*w_2,
	  </me>
	  for some <m>r \in R</m>, and the inverse operation: deleting
	  a subword that lies in <m>R</m>
	</li>
      </ul>
      The group multiplication operation is again concatenation of
      words. The last two exercises are about this group of strings
      with this rewriting system.
    </p>
    
    <exercises>
      <exercise xml:id="ex_normal_gen">
	<statement>
	  <p>Prove <xref ref="prop_normal_gen"/>.</p>
	  <p>Hint: This is similar to the proof of <xref
	  ref="lem_generate"/> the only issue is that if you take a
	  conjugate of a product of conjugates, i.e. <me>
	  g^{-1} \left(\prod_{i=1}^n \left(c_i^{-1}r_i c_i\right) \right)g,
	</me> then it&apos;s not clear that the result is again a product
	of conjugates. See what happens when you conjugate each factor
	of the product by <m>g</m>.
	  </p>	
	</statement>
      </exercise>
      <exercise>
	<statement>
	  <p>
	  Let <m>w \in F(X)</m> be written as a word, let <m>R</m> be
	  a subset of <m>F(X)</m> and consider the new word
	  <m>w&apos;</m> obtained by inserting some element <m>r \in
	  R</m>, i.e.
	  <me>
	    w = w_1*w_2 \to w_1*r*w_2.
	  </me>
	  Show that there are elements <m>h,k \in \ncl R</m> such
	  that:
	  <me>
	    hw = w&apos; = wk.
	  </me>
	  </p>
	  <p>
	    Hint: conjugate <m>r</m> by a prefix or suffix of of
	    <m>w</m>.
	  </p>
 	</statement>
      </exercise>

      <exercise>
	<statement>
	  <p>
	    For this exercise, formally define <m>\pres X R</m> to be
	    the group of words in <m>X</m> modulo the equivalence
	    relation generated by the rewriting rule given at the end
	    of the lecture and multiplication given by concatenation.
	    <ol>
	      <li> Prove that <m>\pres X R</m> is a
	      group. (Optional)</li>
	      <li> Assuming the previous item, prove <me> \pres X R
	      \approx F(X)/\ncl R.
	    </me>
	      </li>
	    </ol>
	  </p>
	</statement>
      </exercise>
    </exercises>
  </section>

  <section xml:id="lec_cayley_graphs"><title>Lecture 4: Cayley
  graphs</title>

  <p>
    So far we have been very combinatorial. Let&apos;s get geometric!
    First recall that a directed graph <m>Z</m> consists of a set
    <m>V</m> of <term>vertices</term> and a set <m>E \subset V\times
    V</m> of directed <term>edges</term>. If we want we can also
    <term>label</term> the directed edges using some symbol from some
    alphabet.
  </p>

  <p>
    Given a generating set <m>S\subset G</m> of a group <m>G</m> we
    can form a <term>Cayley graph</term>, denoted <m>\cay S G</m>, by
    taking the vertex set be the set <m>G</m> itself and for each <m>a
  \in S</m> and each <m>g \in G</m> we draw the directed edge labelled
  <m>a</m> from <m>g</m> to <m>ga</m>:
    <image width="15%" xml:id="cayley_edge">
      <latex-image>
	\begin{tikzpicture}[xscale =2]
	\node[vertex] (u) at (0,0) {};
	\node[vertex] (v) at (1,0) {};
	
	\draw (u)--node[sloped]{$\blacktriangleright$}(v);
	\path (u) --node[above]{$a$} (v);
	\draw (u) node[above]{$g$} ;
	\draw (v) node[above]{$ga$} ;
	\end{tikzpicture}
      </latex-image>,
    </image>
    where the group element is drawn above the vertex. Thus <m>g =
    a_1\cdots a_n.</m>
  </p>

  <p>Let&apos;s do an example. Consider <m>D_{2\times 3}</m>, the
  dihedral group of order 6, or the symmetry group of the triangle. It
  is generated by <m>\rho</m>, the clockwise rotation by
  <m>120^\circ</m>, and <m>r</m> the reflection about the vertical
  axis. We let <m>D_{2 \times 3}</m> act on the left.
  </p>
  <p>
    It is known that <m>D_{2\times 3}</m> has 6 elements, we draw
    its Cayley graph <m>\cay{\{\rho,r\}}{D_{2\times 3}}</m> here
    where next to each vertex <m>g \in G</m> we have the result of
    applying <m>g</m> to the triangle.
    <figure xml:id="fig_cay_d6">
      <caption>The Cayley graph <m>\cay{\{\rho,r\}}{D_{2\times
      3}}</m></caption>
      <image width="75%" xml:id="D6_gens" source="images/Cay_D6.png"/>
    </figure>
    Note that our left action convention means that, say, the element
    <m>r\rho</m>, mean "first rotate, then reflect. The result is that
    the transformed triangles in <xref ref="fig_cay_d6"/> don't
    immediately look in the right place.    
  </p>

  <p>
    Because they are highly symmetric, Cayley graphs are aesthetically
    pleasing, and they essentially play the role of a multiplication
    table in a group. Unfortunately (see <xref ref="ex_S3_cay"/>) a
    group has multiple Cayley graphs, depending on the choice of
    generating set. 
  </p>


  <p>
    Infinite groups also have Cayley graphs. Consider for example
    <m>\ZZ\oplus\ZZ = \ZZ^2</m> which is the set
    <me>
      \ZZ^2= \{(n,m) \mid n,m \in \ZZ\}
    </me>
    equipped with component-wise addition. If we take generators <m>a =
    (1,0)</m> and <m>b=(0,1)</m> then <m>\cay{\{a,b\}}{\ZZ^2}</m> looks
    like:
    <figure xml:id="fig_cay_ZZ2">
      <caption>A Cayley graph for  <m>\ZZ^2</m></caption>
      <image width="75%" xml:id="cay_ZZ2" source="images/Cay-Z2.png">
      </image>
    </figure>
  </p>
  
  <p>
    Every edge <m>e</m> in a directed labelled graph has an
    <term>initial</term> vertex <m>\iota(e)</m>, a
    <term>terminal</term> vertex <m>\tau(e)</m> and a label
    <m>\lab(e)</m>. For example if <m>e=(u,v)</m>, where <m>u,v</m> are
    vertices then <m>\iota(e)=u,\tau(e)=v</m>. We may define the
    <term>formal inverse</term> <m>e^{-1}</m> of an edge <m>e</m> so
    that <m>\tau(e)=\iota(e^{-1})</m> and <m>\tau(e^{-1})=\iota(e)</m>
    and the label <m>\lab(e^{-1}) = \lab(e)^{-1}.y</m>
  </p>
  <p>
    A <term>path</term> in a directed graph <m>Z</m> with edge set
    <m>E</m> is a sequences of edges and formal inverses:
    <me>
      \alpha: e_1\cdots e_n; e_i \in E^{\pm 1}
    </me>
  that "connect together", i.e. <m>\tau(e_i) = \iota(e_{i+1})</m> for
  <m>1\leq i \lt n</m>. The <term>initial point</term> of a path is
  the vertex <m>\iota(e_1)</m> and the <term>terminal vertex</term> is
  the vertex <m>\tau(e_n)</m>. We say that the path <m>\alpha</m>
  <term>goes from its initial vertex to its terminal
  vertex</term>. Here&apos;s an example:
  <image width="15%" xml:id="graph_path">
      <!-- picture of a path in a graph -->
  </image>
  A path is said to be <term>reduced</term> if it has no subpaths of
  the form <m>e e^{-1}</m> for some <m>e \in E^{\pm 1}</m>.
  </p>
  <p>
    This is similar to our treatment of words in an alphabet. The only
    distinction is that you can only concatenate paths if one starts
    where the other ends. Otherwise there is associativity and even a
    reduction procedure where we successively delete subpaths of the
    form <m>ee^-1</m> which we can call
    <term>tightening</term>. Everything works out like in <xref
    ref="reductions"/>, we can even define inverses. Such a structure,
    which is almost like a group except that multiplication is not
    always defined is called a <term>groupoid</term>.
  </p>
  <p>
    If the reader has any experience with fundamental groups in
    topology, then this should also look familiar, as all we are doing
    here is giving a combinatorial treatment of a path:
    <me>
      f:[0,1] \to Z
    </me>
    where the graph <m>Z</m> is thought of as a topological
    space. Specifically, a CW complex with 0 and 1 dimensional cells.
  </p>
  
  <p>
    Given a path <m>\alpha = e_1\cdots e_n</m>, we will say that its
    <term>length</term> is <m>n</m>, the number of edges is contains
    and its <term>label</term> is the word
    <me>
      \lab(\alpha) = \lab(e_1)\cdots\lab(e_n).
    </me>
  </p>
  <p>
    The whole point of <xref ref="reductions"/> was that in a free
    group on a specified alphabet distinct reduced words correspond to
    distinct elements. Once relations are added this is no longer the
    case. Indeed if <m>G = \pres X R</m> and given two distinct
    reduced words <m>w</m> and <m>w&apos;</m> in the alphabet <m>X</m>
    it may be that <m> w \neq_{F(X)} w&apos;</m> (i.e. they are
    distinct reduced words) but that viewed as products of generators
    of <m>G</m> we have <m>w =_G w&apos;</m>, i.e. they have the same
    image via the standard map <m>F(X) \to \pres X R</m>.
  </p>
  <p>
    The Cayley graph illustrates this nicely:
  </p>
  <lemma xml:id="lem_cay_paths_elements">
    <statement>
      <p>
	Let <m>S \subset G</m> be generating set. Let <m>\beta</m> be a
	path in <m>\cay S G</m>that goes from the identity <m>1</m> to
	some element <m>g \in G</m> (recall that the vertices of <m>\cay
	S G</m> are the elements of <m>G</m>) then, viewed as a product
	of element in <m>S^{\pm 1}</m> we have:
	<me>
	  \lab(\beta) =_G g
	</me>
      </p>
    </statement>
  </lemma>
  <proof>
    <p>Let <m>\beta:e_1\cdots e_n</m> and let <m>\lab(e_i) = a_i \in
    S^{\pm 1}</m>. Then by the definition of a Cayley graph we have
        <image width="75%" xml:id="path_elements">
      <latex-image>
	\begin{tikzpicture}[xscale =2]
	\node[vertex] (u1) at (0,0) {};
	\node[vertex] (u2) at (1,0) {};
	\node[vertex] (un) at (3,0) {};
	
	\draw (u1)--node[sloped]{$\blacktriangleright$}(u2);
	\path (u1) --node[above]{$a_1$} (u2);
	\draw (u1) node[above]{$1$};
	\draw (u2) node[above]{$a_1$};
	\path (u2) --node{$\cdots$}(2,0);
	\draw (un) node[above]{$a_1\cdots a_n$} ;
	\draw (2,0)--node[sloped]{$\blacktriangleright$}(un);
	\path (2,0) --node[above]{$a_n$} (un);
	\end{tikzpicture}
      </latex-image>
    </image>
    </p>
  </proof>
  <exercises>
    <exercise xml:id="ex_S3_cay">
      <statement>
	<p>
	  It is well-known that <m>D_{2\times 3} \approx S_3</m>, the
	  group of permutations of the set
	  <m>\{1,2,3\}</m>. <m>S_3</m>, like any symmetric group, is
	  generated by permutations. Using cycle notation we have
	  <me>
	    \gen{(1,2),(2,3)} = S_3.
	  </me>
	</p>
	<p>
	  Draw the Cayley graph <m>\cay{\{(1,2),(2,3)\}}{S_3}</m> and
	  compare it with the Cayley graph for <m>D_{2\times 3}</m>
	  shown above.
	</p>
      </statement>
    </exercise>

    <exercise>
      <statement>
	<p>
	  We always have <m>\gen G = G</m>. What does <m>\cay G G</m>
	  look like?
	</p>
      </statement>
    </exercise>
    
    <exercise>
      <statement>
	<p>
	  Let <m>S\subset G</m> be a generating set. Let <m>d:G\times
	  G \to \RR</m> be the function defined as <m>d(g,h)=m</m>,
	  where <m>m</m> is the length of the shortest path in <m>\cay
	S G</m> from <m>g</m> to <m>h</m>.
	</p>
	<p>
	  Show that <m>d</m> is a metric on <m>G</m>. This metric is
	  called the <term>word metric</term> on <m>G</m>.
	</p>
      </statement>
    </exercise>
    
    <exercise>
      <statement>
	<p>
	  The group <m>(\ZZ,+)</m> is generated by <m>1</m> (here the
	  identity is 0, so that <m>1_\ZZ = 0</m>). Consider the
	  generating set <m>\{1,10\} = \{a,b\}</m> of <m>\ZZ</m>.
	</p>
	<p>
	  Sketch <m>\cay{\{a,b\}}\ZZ</m>. What can you say about the
	  ball of radius 4 about the identity in
	  <m>\cay{\{a,b\}}\ZZ</m> compared to the ball of radius 4
	  about the identity in <m>\cay{\{a,b\}}{\ZZ^2}</m>
	</p>
      </statement>
    </exercise>
    
  </exercises>
</section>




  
<section xml:id="sec_homs_tietze">
  <title>Lecture 5: Homomorphisms and Tietze transformations</title>
  <p>  Let&apos;s return to group presentations. In the previous lectures
we drew Cayley graphs for <m>D_{6 \times 3}</m> and <m>\ZZ^2</m>, we
  will now try to compute presentations. Before continuing <em>a word
  of caution:</em> in general, working with presentations is very
  tricky. Specifically (and we will discuss this properly in a couple
  lectures) there is not general procedure which determines if a
  finite presentation gives a nontrivial group.</p>

  <p>Let's start with a presentation for <m>D_{2\times 3}</m>. We saw
  in Lecture <xref ref="lec_cayley_graphs"/> that <m>D_{2\times 3}</m>
  was generated by elements <m>\rho,r</m>. Therefore by the universal
  property of free groups there is a surjective homomorphism:
  <md>
    <mrow>\amp \varphi: F(r,\rho) \onto D_{2\times 3}</mrow>
    <mrow>\amp \Rightarrow D_{2\times 3} \approx F(r,\rho)/\ker(\varphi)</mrow>
  </md>
  and we are left to find a normal generating set for
  <m>\ker(\varphi)</m>. We must be careful because adding relations
  has consequences, so we must not add too many. We first note that
  the following elements are trivial in <m>D_{2\times 3}</m>:
  <me>
    \rho\rho\rho=_{D_{2\times 3}} rr =_{D_{2\times 3}} r\rho r \rho
    =_{D_{2\times 3}} 1.
  </me>
It therefore follows that <m>\ncl{\rho\rho\rho,rr,r\rho r\rho} \leq
\ker\varphi</m> which means that there is a surjective homomorphism
<men xml:id="eq_d6_pres">
  \pres{r,\rho}{\rho\rho\rho,rr,r\rho r\rho}\onto D_{2\times 3}.
</men>
In other words, we have not added too many relations, we must now
verify that we have added sufficiently many relations. In order to
show this we will use a <term>normal forms argument</term>. We will
show that for the group <m>H = \pres{r,\rho}{\rho\rho\rho,rr,r\rho
r\rho}</m>, we will be able to use the relations to rewrite any
element as
<men xml:id="eq_d6_nf">
  w(r,\rho) =_H \rho^i r^j; 0\leq i \leq 2, 0\leq j \leq 1
</men>
so that <m>H</m> has only 6 elements and there fore the mapping <xref
ref="eq_d6_pres"/> is not only surjective, but also injective and
therefore and isomorphism.
  </p>

  <p>
    The relations <m>\rho\rho\rho=1</m> and <m>rr=1</m> imply that any
    word <m>w(\rho,r)</m> in <m>H</m> can be written as an alternation
    of powers of <m>\rho</m> of exponent between 0 and 2, and of the
    letter <m>r</m>, for example <me> \rho^2 r \rho^2 r \rho r \rho.
    </me>
    We now want to show that any word can be brought to the desired
    form.
  </p>

  <p>
    Suppose that the final factor was of the form <m>\rho^m</m>
    so that<me> w = \cdots r \rho^m</me> then we can splice-in the
    inverse of a relation so that:<me> w = \cdots r \rho \rho^{m-1} =
    \cdots r \rho (\rho^{-1}r^{-1}\rho^{-1}r^{-1})\rho^{m-1} = \cdots
    \rho^{-1}r^{-1} \rho^{m-1}</me> and since <me> r^{-1} = r^{-1}(rr)
    =r</me> we have <me> w = \cdots\rho^{-1}r \rho^{m-1}</me>
    repeating this process removes the last <m>\rho</m> power
    syllable. This is progress, but the argument is tiresome!
  </p>

  <p>
    Although we could do everything by splicing in and deleting
    relations, applying elementary reductions and their inverses, we
    can also just use group theory to replace subwords by equal
    elements.
  </p>
  <p>
   In <m>H</m> we have <men xml:id="eq_d6_commute"> r \rho r \rho =1
   \Rightarrow r \rho = \rho^{-1}r^{-1} = \rho^2 r </men> which means
   we can can simply replace any subword <m>\cdots r\rho \cdots</m> by
   <m> \cdots \rho^2r\cdots </m>. In this manner, we can "commute" all
   the <m>\rho</m> symbols to the left of the word, giving <m>w =
   \rho^k r^j</m>, and since <m>\rho^3=r^2=1</m> the exponents
   <m>k,j</m> can be taken to be division remainders so we can rewrite
   any word in <m>H</m> as in <xref ref="eq_d6_nf"/>. Therefore the 3
   relations <m>\rho\rho\rho, rr, r\rho r\rho</m> ensure the group has
   6 elements.
  </p>
  
  <p> Let us now consider homomorphisms given from groups with
  presentations.</p>
  <lemma xml:id="lem_pres_hom">
    <statement>
      Let <m>G</m> be some group and let <m>H = \pres X R</m> be a
      group given by a presentation. A mapping <m>\varphi^*:X \to
      G</m> extends to homomorphism <m>\varphi:H \to G</m> if and only
      if for each <m>r(X) = x_1^{\epsilon_1}\cdots x_n^{epsilon_n} \in
      R</m>, where <m>x_i \in X, \epsilon_i \in \{\pm 1\}</m> upon
      substitution in <m>G</m> we get:
      <me>
	\varphi^*(x_1)^{\epsilon_1} \cdots \varphi^*(x_n)^{\epsilon_n}
	=_G 1.
      </me>
    </statement>
  </lemma>
  <p>
    One consequence of this equations. Let <m>G</m> be a group, let
    <m>x_1,\ldots,x_n</m> be a collection of unknowns and consider a
    system of equations:
    <me>
      \mathcal{E} :\left\{
      \begin{array}{l}
      r_1(X) = x_{i_{11}}^{\epsilon_{11}}\cdots
      x_{i_{1c_1}}^{\epsilon_{1c_1}}=_G 1\\
      \cdots\\
      r_m(X) = x_{i_{m1}}^{\epsilon_{m1}}\cdots x_{i_{mc_m}}^{\epsilon_{mc_m}}=_G 1\\
      \end{array}
      \right.,
    </me>
    where <m>x_{i_{jk}} \in X</m> and <m>\epsilon_{jk} \in \{\pm
    1\}</m>. Then the solutions of <m>\mathcal E</m> are precisely the
    given by the homomorphisms
    
    <me>
      \pres{x_1,\ldots,x_n}{r_1,\cdots,r_m} \to G.
    </me>
  </p>

  
  <p>
    As we saw in the previous lecture, different choices of generating
    sets gave different Cayley graphs. We will now describe all
    possible presentations of a group.
  </p>

  <p>
    Let <m>\mathcal P = \pres X R</m> be a presentation (not a group,
    but a formal presentation) and consider the following three
    <term>Tietze</term> transformations.
    <ul>
      <li><term>T1: The dictionary transformation.</term><me>
      \pres X R \to \pres{X \cup \{y\}}{R\cup\{y^{-1}w(X)\}},
    </me>
    where <m>y \not\in X</m> and <m>w(X)</m> is a word in <m>X</m>.
    Informally, add a new symbol for an element <m>y</m> and say that
    <me>
      y = w(X) \Leftrightarrow y^{-1}w(X)=1.
    </me>
    So that they new symbol <m>y</m> is just "shorthand" for the
    element <m>w(X)</m>.
      </li>
      <li><term>T2: Add a redundant relation.</term><me>
      \pres X R \to \pres{X}{R\cup\{r'\}},</me> where <m>r' \in \ncl
      R</m>. Informally, add a relation <m>r'</m> which is already a
      consequence of the relations in <m>R</m>.</li>
      <li><term>T3: Rename a symbol.</term> Take some symbol <m>z
      \not\in X</m>, take <m>X'=(X\setminus \{x\})\cup\{z\}</m> and do
      <me>\pres X R \to \pres{X'}{R'},</me> where <m>R'</m> is
      obtained by replacing every instance of <m>x</m> by <m>z</m> in
      every word in <m>R.</m></li>
    </ul>
    <xref ref="ex_tietze_1"/> is to show that these transformations
    yield presentations defining isomorphic groups. Note that the
    inverse of T1 involves deleting a generator and a very specific
    type of relation and the inverse of T2 involves removing a
    relation that is a consequence of the remaining relations. 
  </p>

  <p>
    As promised we have the following:
    <theorem xml:id="thm_tietze_trans">
      <statement>
	<p>
	  Two finite presentations <m>\pres X R</m> and <m>\pres Y S</m>
	  define isomorphic groups if and only if <m>\pres Y S</m> can
	  be obtained from <m>\pres X R</m> by a sequence of Tietze
	  transformations and their inverses.
	</p>
      </statement>
    </theorem>
    The proof is deferred to <xref ref="ex_tietze_2"/>.
  </p>
  <exercises>
    <exercise xml:id="ex_ZZ2_pres">
      <statement>
	<p>Prove that <me>\ZZ^2 = \pres{a,b}{a^{-1}b^{-1}ab}</me>.</p>
	<p>Hint: Use the same approach as for <m>D_{2\times 3}</m>,
	use the normal forms <m>a^nb^m, n,m \in \ZZ</m>.</p>
      </statement>
    </exercise>
    <exercise xml:id="ex_lem_hom">
      <statement>
	<p>Prove <xref ref="lem_pres_hom"/>.</p>
      </statement>
    </exercise>
    <exercise xml:id="ex_d6_commute">
      <statment>
	Deduce the result of <xref ref="eq_d6_commute"/>, namely that
	we can substitute <m>r\rho</m> by <m>\rho^2 r</m>, only by
	using insertions and deletions of relations, elementary
	cancellations or their inverses. <em>Or at least try and
	appreciate how useful the axioms of group theory and
	generalized associativity are.</em>
      </statment>
    </exercise>
    <exercise xml:id="ex_tietze_1">
      <statement>
	<p>
	  Prove that all three Tietze transformations give
	  isomorphisms.
	</p>
      </statement>
    </exercise>
    <exercise xml:id="ex_tietze_2">
      <statement>
	<p>
	  Prove <xref ref="thm_tietze_trans"/>.
	</p>
	<p>
	  Hint: One direction is obvious. To show the converse one
	  approach is to construct an intermediate presentation <me>
	  \pres{X \cup Y}{ R \cup S \cup D}</me> which is obtainable
	  from <m>\pres X R</m> and from <m>\pres Y S</m> by a
	  sequence of Tietze transformations. <m>D</m> will be a bunch
	  of dictionary relations.
	</p>
	<p>
	  Some dictionary relations will be needed. To find them
	  consider an isomorphism <m>\varphi: \pres X R \to \pres Y
	  S.</m> This will map each <m>x \in X</m> to some word in
	  <m>Y</m>. You will also need <m>\varphi^{-1}</m> and add
	  relations.
	</p>
      </statement>
    </exercise>
    
  </exercises>  
  </section>

  <!-- UP TO HERE -->
  <section xml:id="sec_alg_prob"><title> Lecture 6: Algorithmic
  problems in group theory and elements of recursion theory</title>
  <p>
    Our combinatorial approach to group theory naturally turns groups
    into computational objects: sets of strings with rewriting
    rules. In the 1920s Max Dehn proposed the following three
    algorithmic problems:
    <ul>
      <li>
	<term>The word problem:</term> Given a group presentation <m>G
	= \pres X R</m> and word <m>w(X)</m> in the alphabet <m>X</m>
	determine if <m>w(X)=_G 1</m>.
      </li>
      <li>
	<term>The conjugacy problem:</term> Given a group presentation
	<m>G = \pres X R</m> and words <m>w(X),u(X)</m> in the
	alphabet <m>X</m> determine if <em>there exists</em> some <m>g
	\in G</m> such that <m>g^{-1}w(X)g=_G u(X).</m>
      </li>
      <li>
	<term>The isomorphism problem:</term> Given two group
	presentations <m>\pres X R</m> and <m>\pres Y S</m> determine
	if they define isomorphic groups.
      </li>
    </ul>    
  </p>
  <p>
    First the bad news:
    <theorem xml:id="thm_novikov_boone"><title>The Novikov-Boone
    theorem</title>
    <statement>
      <p>There exists a finitely presented group
      <m>G=\pres{x_1,\ldots,x_n}{r_1,\ldots,r_m}</m> for which the
      word problem is undecidable.</p>
    </statement>
    </theorem>

    Let's explain this result in more detail. There exists a group
    presentation which you can actually write out so that for any
    algorithm you come up with, for example a computer program written
    in Python, to determine <em>correctly</em> whether words are equal
    to the trivial element, there will be a word (in fact many, many
    words) for which your algorithm will never terminate.    
  </p>

  <p> We say a set <m>S</m> is <term>recursively enumerable</term> or
  <term>r.e.</term> if there is some algorithm <m>\mathfrak A</m>
  which enumerates the elements of <m>S</m>.
  <proposition xml:id="prop_trivial_re"><title>Trivial elements are
  recursively enumerable</title>
  <statement>
    <p>
      Let <m>G=\pres {x_1,\ldots,x_n}{r_1,\ldots,r_m}</m> be a
      finitely presented group. Then the set
      <me>
	\mathcal E = \left\{w(X) \mid w(X) \textrm{ is reduced and }
	w(X)=_G 1\right\} </me> of reduced words equal to <m>1</m> is
	recursively enumerable.
    </p>
  </statement>
  <proof>
    <p>
      By <xref ref="prop_normal_gen"/> the set <m>\mathcal E</m>
      consists of taking all products
      <me>
	\prod_{i=1}^n c_i^{-1}r_{j_i}^{\epsilon_i}c_i
      </me>
    </p> where <m>r_{j_i} \in \{r_1,\cdots,r_m\}, \epsilon_i \in \{\pm
    1\}</m> and then performing free reduction. Consider the sets
    <m>\mathcal E_N</m> consisting of all products consisting of at
    most <m>N</m> factors <m>c_i^{-1}r_{j_i}c_i</m>, and where each
    conjugator also has length at most <m>N</m>. Then <m>\mathcal
    E_N</m> is recursively enumerable for each <m>N</m> therefore so
    must the countable union<me> \mathcal E = \bigcup_{N=1}^{\infty}
    \mathcal E_N.
  </me>
  </proof>
  </proposition>
  </p>
  <p>
    Although enumeration seems somewhat contrived, it is fact
    equivalent the more mathematically natural concept of set
    membership.
    <proposition xml:id="prop_re_membership">
      <statement>
	<p> Let <m>S</m> be a set of strings of symbols in some
	alphabet <m>X</m>. The following are equivalent:
	<ul>
	  <li>There exists a <term>membership algorithm</term>
	  <m>\mathfrak A</m> which takes as inputs strings in <m>X</m>
	  with the following property: <m>s \in S</m> if and only if
	  <m>\mathfrak A</m> terminates on the input <m>s</m>.</li>
	  <li> <m>S</m> is recursively enumerable. </li>
	</ul>
	</p>
      </statement>
      <proof>
	<p>
	  Suppose first you are given the algorithm <m>\mathfrak A</m>
	  as in the statement of the proposition. Let
	  <m>w_1,w_2,\ldots</m> be an enumeration of the strings in
	  <m>X</m> and let <m>\mathfrak M_N</m> be a program which
	  performs the <m>N</m> first steps of <m>\mathfrak A</m> on
	  the inputs <m>w_1,\ldots,w_N</m>. If one of the parallel
	  processes terminates then <m>\mathfrak N</m> outputs the
	  string <m>w_j</m> of the corresponding terminating
	  process. Then our enumeration algorithm is an algorithm
	  which sequentially runs
	  <m>\mathfrak N_{1},\mathfrak N_2,\ldots</m>.
	</p>

	<p>
	  Conversely suppose <m>S</m> is <m>r.e.</m> and let
	  <m>\mathfrak B</m> be the enumeration algorithm. Then we can
	  make our membership algorithm <m>\mathfrak A</m> a follows:
	  gien an input <m>s</m>, run <m>\mathfrak B</m> and wait
	  until <m>s</m> appears, if it ever does, stop.
	</p>
      </proof>
    </proposition>
  </p>
  <p>
    Now, in general, when asking <me> x \stackrel{?}{\in} S</me> we
    expect a definitive yes or no answer. So consider the finitely
    presented group <m>G = \pres X R</m>, then the word problem is
    decidable if and only if <m>\mathcal E</m>, the set of reduced
    words representing <m>1</m> in <m>G</m> is r.e. and the set
    <m>F(X)\setminus \mathcal E</m> of reduced words not representing
    the identity is also recursively enumerable. Indeed, in this case,
    there is a procedure which is guaranteed to terminate on any
    reduced word and correctly say whether or not the word is trivial.
  </p>
  <p>
    So how does this work with <xref ref="thm_novikov_boone"/>? Well
    <xref ref="prop_trivial_re"/> says that all trivial elements can
    be enumerated, so what is difficult is to show that some reduced
    word represents a non-trivial element. This is equivalent to
    saying that some word <em>cannot</em> be written as a product of
    conjugates of the relations. Thus, asserting that a word is
    non-trivial, is a <em>non-existence</em> statement: there does not
    exist a product of conjugates of relators that is freely equal to
    some word.
  </p>
  <p>
    It is a common theme in mathematics that non-existence proofs are
    difficult. One of the triumphs of geometric group theory is that
    we can solve all three of Dehn's problems for many interesting
    classes of groups. Next lecture we will do this for free groups.
  </p>
  
  <exercises>
    <exercise xml:id="ex_free_gp_wp">
      <statement>
	<p>Show that the word problem is solvable for <m>F(X)</m>, the
	free group on the alphabet <m>X</m>.</p>
	<p>Hint: This problem is not difficult.</p>
      </statement>
    </exercise>
    <exercise xml_id="ex_equality_problem">
      <statement>
	<p> The <term>equality problem</term> for <m>G = \pres X R</m>
	is do decide, given two words, whether:
	<me>
	   u \stackrel ? = w.
	</me>
	Show that solvability of the equality problem is equivalent to
	solvability of the word problem.
	</p>
      </statement>
    </exercise>
    <exercise xml:id="ex_conjugacy_search">
      <statement>
	<p> The <term>conjugacy search problem</term> is a variation
	of the conjugacy problem which, given elements <m>h,k</m>, not
	only outputs YES or NO to the question of whether they are
	conjugate, but, if YES, will also produce an element such that
	<me>
	  g^{-1}hg = k
	</me>
	</p>
	<p>
	  Show that solvability of the conjugacy search problem is
	  equivalent to solvability of the conjugacy problem.
	</p>
      </statement>
    </exercise>
    <exercise xml:id="ex_pres_re">
      <statement>
	<p>
	  Let <m>G = \pres X R</m> be a finite presentation.
	</p>
	<p>
	  Show that (up to relabeling the generators) the set of all
	  finite presentations which define groups isomorphic to
	  <m>G</m> is recursively enumerable.
	</p>
      </statement>
    </exercise>

    <exercise xml:id="ex_recursively_presented">
      <statement>
	<p>
	  We say that <m>G = \pres X R </m> is <term>recursively
	  presented</term> if there are algorithms <m>\mathfrak{X}</m>
	  and <m>\mathfrak{R}</m> which enumerate the sets
	  <m>X=\{x_1,x_2,\ldots\}</m> and <m>R=\{r_1,r_2,\ldots\}</m>
	  (respectively.)	  
	</p>
	<p> Show that if <m>G = \pres X R</m> is a recursive
	presentation, then the set of finite words is recursively
	enumerable.</p> 
      </statement>
    </exercise>
  </exercises>
</section>


<!-- Dehn's problems in free groups. -->
  <!-- Quasi-siometries -->
  <!-- Ends, 0,1,2,continuum, trees -->
  <!-- 2 ended groups are virtually cyclic  -->
  
  <!-- Nielsen theory. -->
  <!-- Stallings foldings. -->
  </chapter>
  <!-- Chapter: Diagrams -->
  <!-- Lollipops. -->

  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  <!-- END OF LECTURES -->
  
  
  <backmatter>
    <references>
      <p>
      Much of the material in these lectures is covered in <xref
      ref="book_lyndon-schupp"/>, but this book is difficult to
      read. Stillwell&apos;s book <xref ref="book_stillwell"/> has an
      excellent treatment of algorithmic problems and covers many
      crucial interactions between topology and group theory that
      will not be not covered in this course. Both of these books also
      give important historical accounts.
      </p>
      <p>
      Although the ideas of small cancellation theory have been around
      for many decades the paper <xref ref="art_mccammond-wise"/>
      gives a thorough and modern treatment of the topic. Most
      material on hyperbolic groups will be taken from <xref
      ref="notes_hyperbolic"/>.
      </p>

      <p> The book, which as of 2020, gives the best description of
      the field is Drutu and Kapovich&apos;s <em>Geometric Group
      Theory</em> <xref ref="book_drutu-kapovich"/>. This book also
      has many historical references. Many important topics not
      covered in this book are covered in <xref ref="GGT-park"/> which
      is also called... <em>Geometric Group Theory.</em>
      </p>


      <p>
    	As far as accessible contemporary introductions go, the texts
    	<xref ref="book_bogopolski"/> and <xref ref="book_loh_ggt"/>
    	are at a level similar to this course, but cover different
    	topics.(And yes, so far there are three books with the same
    	title.) <url
    	href="https://www.jstor.org/stable/j.ctt1vwmg8g">Office Hours
    	with a Geometric Group Theorist</url> apparently also gives a
    	good idea of the field. And finally <xref
    	ref="book_groups_and_back"/> is another good introductory text
    	which covers substantially different topics.
      </p>
      
      <biblio xml:id="book_bogopolski">
    	Oleg Bogopolski. <em>Introduction to Group Theory.</em>
    	February 2008.
      </biblio>
      <biblio xml:id="notes_hyperbolic">
    	J. M. Alonso, T. Brady, D. Cooper, V. Ferlini, M. Lustig,
    	M. Mihalik, M. Shapiro, and H. Short. <em>Notes on word hyperbolic
    	groups. In Group theory from a geometrical viewpoint (Trieste,
    	1990),</em> pages 3–63. World Sci. Publ., River Edge, NJ, 1991.
      </biblio>

      <biblio xml:id="GGT-park">
    	Mladen Bestvina, Michah Sageev, and Karen Vogtmann,
    	editors. <em>Ge- ometric group theory.</em> Number volume 21
    	in IAS/Park City math- ematics series. American Mathematical
    	Society ; Institute for Ad- vanced Studyb, Providence, RI :
    	[Princeton, N.J.], 2014.
      </biblio>

      <biblio xml:id="book_drutu-kapovich">
    	Cornelia Druţu and Michael Kapovich. <em>Geometric Group
    	Theory.</em> American Mathematical Soc., March
    	2018.
      </biblio>

      <biblio xml:id="book_lyndon-schupp">
    	Roger C. Lyndon and Paul E. Schupp. <em>Combinatorial group
    	theory.</em> Classics in Mathematics. Springer-Verlag, Berlin,
    	2001.
      </biblio>

      <biblio xml:id="book_stillwell">
    	John Stillwell. <em>Classical topology and combinatorial group
    	theory,</em> volume 72 of Graduate Texts in
    	Mathematics. Springer-Verlag, New York, second edition, 1993.
      </biblio>

      <biblio xml:id="art_mccammond-wise">
    	Jonathan P. McCammond and Daniel T. Wise. <em>Fans and Ladders
    	in Small Cancellation Theory.</em>. Proceedings of the London
    	Mathematical Society, 84(3):599–644, May 2002. Publisher:
    	Cambridge University Press.
      </biblio>

      <biblio xml:id="book_ggt_officehours">
    	Matt Clay and Dan Margalit, editors. <em>Office hours with a
    	geometric group theorist.</em> Princeton University Press,
    	Princeton, NJ, 2017.
      </biblio>

      <biblio xml:id="book_loh_ggt">Clara Löh. <em>Geometric group
      theory.</em> Universitext. Springer, Cham, 2017.</biblio>

      <biblio xml:id="book_groups_and_back">
    	Vaughn Climenhaga and Anatole Katok. <em>From Groups to
    	Geometry and Back.</em> American Mathematical Soc., April 2017
      </biblio>
    </references>
  </backmatter>
  
  </book>
</pretext>
